// Generated by gencpp from file esr_msgs/Track.msg
// DO NOT EDIT!


#ifndef ESR_MSGS_MESSAGE_TRACK_H
#define ESR_MSGS_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace esr_msgs
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : header()
    , status(0)
    , index(0)
    , range(0.0)
    , range_rate(0.0)
    , range_accl(0.0)
    , azimuth(0.0)
    , lateral_rate(0.0)
    , width(0.0)
    , is_mr_update(false)
    , is_lr_update(false)
    , amplitude(0)  {
    }
  Track_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , index(0)
    , range(0.0)
    , range_rate(0.0)
    , range_accl(0.0)
    , azimuth(0.0)
    , lateral_rate(0.0)
    , width(0.0)
    , is_mr_update(false)
    , is_lr_update(false)
    , amplitude(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _index_type;
  _index_type index;

   typedef float _range_type;
  _range_type range;

   typedef float _range_rate_type;
  _range_rate_type range_rate;

   typedef float _range_accl_type;
  _range_accl_type range_accl;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _lateral_rate_type;
  _lateral_rate_type lateral_rate;

   typedef float _width_type;
  _width_type width;

   typedef uint8_t _is_mr_update_type;
  _is_mr_update_type is_mr_update;

   typedef uint8_t _is_lr_update_type;
  _is_lr_update_type is_lr_update;

   typedef int8_t _amplitude_type;
  _amplitude_type amplitude;




  typedef boost::shared_ptr< ::esr_msgs::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::esr_msgs::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::esr_msgs::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::esr_msgs::Track > TrackPtr;
typedef boost::shared_ptr< ::esr_msgs::Track const> TrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::esr_msgs::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::esr_msgs::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace esr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'esr_msgs': ['/home/xue/ROS/catkin_ws/src/radar/esr_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::esr_msgs::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::esr_msgs::Track_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esr_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esr_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esr_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esr_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::esr_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8be915c8c9061bba3ebae89845e593a";
  }

  static const char* value(const ::esr_msgs::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8be915c8c9061bbULL;
  static const uint64_t static_value2 = 0xa3ebae89845e593aULL;
};

template<class ContainerAllocator>
struct DataType< ::esr_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "esr_msgs/Track";
  }

  static const char* value(const ::esr_msgs::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::esr_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 status # 0: no target 1: new 2: new updated 3: updated 4: coasted 5: merged 6: invalid coasted 7: new coasted\n\
uint8 index # 1..64\n\
float32 range # cropped between 0..204.7 m\n\
float32 range_rate # cropped between -81.92..81.91m/s\n\
float32 range_accl # cropped between -25.6..25.55 m/s^2\n\
float32 azimuth # cropped between -51.2..51.1 deg\n\
float32 lateral_rate # cropped between -8..7.75 m/s\n\
float32 width # cropped between 0..7.5 m\n\
bool is_mr_update\n\
bool is_lr_update\n\
#bool is_oncoming\n\
#bool is_bridge\n\
#bool is_grouping_changed\n\
int8 amplitude # cropped to -10..21dB\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::esr_msgs::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::esr_msgs::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.index);
      stream.next(m.range);
      stream.next(m.range_rate);
      stream.next(m.range_accl);
      stream.next(m.azimuth);
      stream.next(m.lateral_rate);
      stream.next(m.width);
      stream.next(m.is_mr_update);
      stream.next(m.is_lr_update);
      stream.next(m.amplitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::esr_msgs::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::esr_msgs::Track_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "range_rate: ";
    Printer<float>::stream(s, indent + "  ", v.range_rate);
    s << indent << "range_accl: ";
    Printer<float>::stream(s, indent + "  ", v.range_accl);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "lateral_rate: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_rate);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "is_mr_update: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_mr_update);
    s << indent << "is_lr_update: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_lr_update);
    s << indent << "amplitude: ";
    Printer<int8_t>::stream(s, indent + "  ", v.amplitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ESR_MSGS_MESSAGE_TRACK_H
