// Generated by gencpp from file esr_msgs/Status.msg
// DO NOT EDIT!


#ifndef ESR_MSGS_MESSAGE_STATUS_H
#define ESR_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace esr_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , scan_index(0)
    , is_comm_error(false)
    , is_radiating(false)
    , is_failed(false)
    , is_blocked(false)
    , is_overheating(false)
    , is_raw_data_mode(false)
    , internal_temperature(0)
    , sw_version(0)
    , is_lr_enabled(false)
    , is_mr_enabled(false)
    , is_sidelobe_blockage(false)
    , is_partial_blockage(false)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , scan_index(0)
    , is_comm_error(false)
    , is_radiating(false)
    , is_failed(false)
    , is_blocked(false)
    , is_overheating(false)
    , is_raw_data_mode(false)
    , internal_temperature(0)
    , sw_version(0)
    , is_lr_enabled(false)
    , is_mr_enabled(false)
    , is_sidelobe_blockage(false)
    , is_partial_blockage(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _scan_index_type;
  _scan_index_type scan_index;

   typedef uint8_t _is_comm_error_type;
  _is_comm_error_type is_comm_error;

   typedef uint8_t _is_radiating_type;
  _is_radiating_type is_radiating;

   typedef uint8_t _is_failed_type;
  _is_failed_type is_failed;

   typedef uint8_t _is_blocked_type;
  _is_blocked_type is_blocked;

   typedef uint8_t _is_overheating_type;
  _is_overheating_type is_overheating;

   typedef uint8_t _is_raw_data_mode_type;
  _is_raw_data_mode_type is_raw_data_mode;

   typedef int8_t _internal_temperature_type;
  _internal_temperature_type internal_temperature;

   typedef uint16_t _sw_version_type;
  _sw_version_type sw_version;

   typedef uint8_t _is_lr_enabled_type;
  _is_lr_enabled_type is_lr_enabled;

   typedef uint8_t _is_mr_enabled_type;
  _is_mr_enabled_type is_mr_enabled;

   typedef uint8_t _is_sidelobe_blockage_type;
  _is_sidelobe_blockage_type is_sidelobe_blockage;

   typedef uint8_t _is_partial_blockage_type;
  _is_partial_blockage_type is_partial_blockage;




  typedef boost::shared_ptr< ::esr_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::esr_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::esr_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::esr_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::esr_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::esr_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::esr_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace esr_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'esr_msgs': ['/home/xue/ROS/catkin_ws/src/radar/esr_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::esr_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::esr_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esr_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::esr_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esr_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::esr_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::esr_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3adef9d0d36f7f744fe48eb8f4d08e7a";
  }

  static const char* value(const ::esr_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3adef9d0d36f7f74ULL;
  static const uint64_t static_value2 = 0x4fe48eb8f4d08e7aULL;
};

template<class ContainerAllocator>
struct DataType< ::esr_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "esr_msgs/Status";
  }

  static const char* value(const ::esr_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::esr_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
# from 4e0\n\
uint16 scan_index\n\
#uint8 dsp_timestamp # in ms\n\
#float32 vehicle_speed # in m/s\n\
#float32 vehicle_yaw_rate # in in deg/s\n\
#float32 vehicle_turning_radius # in m\n\
#float32 range # cropped between 0..204.7 m\n\
bool is_comm_error\n\
# from 4e1\n\
#uint16 steering_angle_ack # in deg\n\
bool is_radiating\n\
bool is_failed\n\
bool is_blocked\n\
bool is_overheating\n\
#uint8 max_tracks_ack # 1..64\n\
bool is_raw_data_mode\n\
int8 internal_temperature # in degC\n\
uint16 sw_version\n\
#float32 yaw_rate_bias # deg/s\n\
#float32 veh_spd_comp_factor\n\
# from 4e3\n\
bool is_lr_enabled\n\
bool is_mr_enabled\n\
bool is_sidelobe_blockage\n\
bool is_partial_blockage\n\
#float32 auto_align_angle\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::esr_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::esr_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.scan_index);
      stream.next(m.is_comm_error);
      stream.next(m.is_radiating);
      stream.next(m.is_failed);
      stream.next(m.is_blocked);
      stream.next(m.is_overheating);
      stream.next(m.is_raw_data_mode);
      stream.next(m.internal_temperature);
      stream.next(m.sw_version);
      stream.next(m.is_lr_enabled);
      stream.next(m.is_mr_enabled);
      stream.next(m.is_sidelobe_blockage);
      stream.next(m.is_partial_blockage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::esr_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::esr_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "scan_index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.scan_index);
    s << indent << "is_comm_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_comm_error);
    s << indent << "is_radiating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_radiating);
    s << indent << "is_failed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_failed);
    s << indent << "is_blocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_blocked);
    s << indent << "is_overheating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_overheating);
    s << indent << "is_raw_data_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_raw_data_mode);
    s << indent << "internal_temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.internal_temperature);
    s << indent << "sw_version: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sw_version);
    s << indent << "is_lr_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_lr_enabled);
    s << indent << "is_mr_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_mr_enabled);
    s << indent << "is_sidelobe_blockage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_sidelobe_blockage);
    s << indent << "is_partial_blockage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_partial_blockage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ESR_MSGS_MESSAGE_STATUS_H
