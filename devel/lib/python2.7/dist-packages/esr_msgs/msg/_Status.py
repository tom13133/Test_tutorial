# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from esr_msgs/Status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Status(genpy.Message):
  _md5sum = "3adef9d0d36f7f744fe48eb8f4d08e7a"
  _type = "esr_msgs/Status"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
# from 4e0
uint16 scan_index
#uint8 dsp_timestamp # in ms
#float32 vehicle_speed # in m/s
#float32 vehicle_yaw_rate # in in deg/s
#float32 vehicle_turning_radius # in m
#float32 range # cropped between 0..204.7 m
bool is_comm_error
# from 4e1
#uint16 steering_angle_ack # in deg
bool is_radiating
bool is_failed
bool is_blocked
bool is_overheating
#uint8 max_tracks_ack # 1..64
bool is_raw_data_mode
int8 internal_temperature # in degC
uint16 sw_version
#float32 yaw_rate_bias # deg/s
#float32 veh_spd_comp_factor
# from 4e3
bool is_lr_enabled
bool is_mr_enabled
bool is_sidelobe_blockage
bool is_partial_blockage
#float32 auto_align_angle

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','scan_index','is_comm_error','is_radiating','is_failed','is_blocked','is_overheating','is_raw_data_mode','internal_temperature','sw_version','is_lr_enabled','is_mr_enabled','is_sidelobe_blockage','is_partial_blockage']
  _slot_types = ['std_msgs/Header','uint16','bool','bool','bool','bool','bool','bool','int8','uint16','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,scan_index,is_comm_error,is_radiating,is_failed,is_blocked,is_overheating,is_raw_data_mode,internal_temperature,sw_version,is_lr_enabled,is_mr_enabled,is_sidelobe_blockage,is_partial_blockage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.scan_index is None:
        self.scan_index = 0
      if self.is_comm_error is None:
        self.is_comm_error = False
      if self.is_radiating is None:
        self.is_radiating = False
      if self.is_failed is None:
        self.is_failed = False
      if self.is_blocked is None:
        self.is_blocked = False
      if self.is_overheating is None:
        self.is_overheating = False
      if self.is_raw_data_mode is None:
        self.is_raw_data_mode = False
      if self.internal_temperature is None:
        self.internal_temperature = 0
      if self.sw_version is None:
        self.sw_version = 0
      if self.is_lr_enabled is None:
        self.is_lr_enabled = False
      if self.is_mr_enabled is None:
        self.is_mr_enabled = False
      if self.is_sidelobe_blockage is None:
        self.is_sidelobe_blockage = False
      if self.is_partial_blockage is None:
        self.is_partial_blockage = False
    else:
      self.header = std_msgs.msg.Header()
      self.scan_index = 0
      self.is_comm_error = False
      self.is_radiating = False
      self.is_failed = False
      self.is_blocked = False
      self.is_overheating = False
      self.is_raw_data_mode = False
      self.internal_temperature = 0
      self.sw_version = 0
      self.is_lr_enabled = False
      self.is_mr_enabled = False
      self.is_sidelobe_blockage = False
      self.is_partial_blockage = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H6BbH4B().pack(_x.scan_index, _x.is_comm_error, _x.is_radiating, _x.is_failed, _x.is_blocked, _x.is_overheating, _x.is_raw_data_mode, _x.internal_temperature, _x.sw_version, _x.is_lr_enabled, _x.is_mr_enabled, _x.is_sidelobe_blockage, _x.is_partial_blockage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.scan_index, _x.is_comm_error, _x.is_radiating, _x.is_failed, _x.is_blocked, _x.is_overheating, _x.is_raw_data_mode, _x.internal_temperature, _x.sw_version, _x.is_lr_enabled, _x.is_mr_enabled, _x.is_sidelobe_blockage, _x.is_partial_blockage,) = _get_struct_H6BbH4B().unpack(str[start:end])
      self.is_comm_error = bool(self.is_comm_error)
      self.is_radiating = bool(self.is_radiating)
      self.is_failed = bool(self.is_failed)
      self.is_blocked = bool(self.is_blocked)
      self.is_overheating = bool(self.is_overheating)
      self.is_raw_data_mode = bool(self.is_raw_data_mode)
      self.is_lr_enabled = bool(self.is_lr_enabled)
      self.is_mr_enabled = bool(self.is_mr_enabled)
      self.is_sidelobe_blockage = bool(self.is_sidelobe_blockage)
      self.is_partial_blockage = bool(self.is_partial_blockage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_H6BbH4B().pack(_x.scan_index, _x.is_comm_error, _x.is_radiating, _x.is_failed, _x.is_blocked, _x.is_overheating, _x.is_raw_data_mode, _x.internal_temperature, _x.sw_version, _x.is_lr_enabled, _x.is_mr_enabled, _x.is_sidelobe_blockage, _x.is_partial_blockage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.scan_index, _x.is_comm_error, _x.is_radiating, _x.is_failed, _x.is_blocked, _x.is_overheating, _x.is_raw_data_mode, _x.internal_temperature, _x.sw_version, _x.is_lr_enabled, _x.is_mr_enabled, _x.is_sidelobe_blockage, _x.is_partial_blockage,) = _get_struct_H6BbH4B().unpack(str[start:end])
      self.is_comm_error = bool(self.is_comm_error)
      self.is_radiating = bool(self.is_radiating)
      self.is_failed = bool(self.is_failed)
      self.is_blocked = bool(self.is_blocked)
      self.is_overheating = bool(self.is_overheating)
      self.is_raw_data_mode = bool(self.is_raw_data_mode)
      self.is_lr_enabled = bool(self.is_lr_enabled)
      self.is_mr_enabled = bool(self.is_mr_enabled)
      self.is_sidelobe_blockage = bool(self.is_sidelobe_blockage)
      self.is_partial_blockage = bool(self.is_partial_blockage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_H6BbH4B = None
def _get_struct_H6BbH4B():
    global _struct_H6BbH4B
    if _struct_H6BbH4B is None:
        _struct_H6BbH4B = struct.Struct("<H6BbH4B")
    return _struct_H6BbH4B
