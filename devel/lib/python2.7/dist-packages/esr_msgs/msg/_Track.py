# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from esr_msgs/Track.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Track(genpy.Message):
  _md5sum = "b8be915c8c9061bba3ebae89845e593a"
  _type = "esr_msgs/Track"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
uint8 status # 0: no target 1: new 2: new updated 3: updated 4: coasted 5: merged 6: invalid coasted 7: new coasted
uint8 index # 1..64
float32 range # cropped between 0..204.7 m
float32 range_rate # cropped between -81.92..81.91m/s
float32 range_accl # cropped between -25.6..25.55 m/s^2
float32 azimuth # cropped between -51.2..51.1 deg
float32 lateral_rate # cropped between -8..7.75 m/s
float32 width # cropped between 0..7.5 m
bool is_mr_update
bool is_lr_update
#bool is_oncoming
#bool is_bridge
#bool is_grouping_changed
int8 amplitude # cropped to -10..21dB

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','status','index','range','range_rate','range_accl','azimuth','lateral_rate','width','is_mr_update','is_lr_update','amplitude']
  _slot_types = ['std_msgs/Header','uint8','uint8','float32','float32','float32','float32','float32','float32','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,index,range,range_rate,range_accl,azimuth,lateral_rate,width,is_mr_update,is_lr_update,amplitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Track, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = 0
      if self.index is None:
        self.index = 0
      if self.range is None:
        self.range = 0.
      if self.range_rate is None:
        self.range_rate = 0.
      if self.range_accl is None:
        self.range_accl = 0.
      if self.azimuth is None:
        self.azimuth = 0.
      if self.lateral_rate is None:
        self.lateral_rate = 0.
      if self.width is None:
        self.width = 0.
      if self.is_mr_update is None:
        self.is_mr_update = False
      if self.is_lr_update is None:
        self.is_lr_update = False
      if self.amplitude is None:
        self.amplitude = 0
    else:
      self.header = std_msgs.msg.Header()
      self.status = 0
      self.index = 0
      self.range = 0.
      self.range_rate = 0.
      self.range_accl = 0.
      self.azimuth = 0.
      self.lateral_rate = 0.
      self.width = 0.
      self.is_mr_update = False
      self.is_lr_update = False
      self.amplitude = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B6f2Bb().pack(_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude,) = _get_struct_2B6f2Bb().unpack(str[start:end])
      self.is_mr_update = bool(self.is_mr_update)
      self.is_lr_update = bool(self.is_lr_update)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B6f2Bb().pack(_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.status, _x.index, _x.range, _x.range_rate, _x.range_accl, _x.azimuth, _x.lateral_rate, _x.width, _x.is_mr_update, _x.is_lr_update, _x.amplitude,) = _get_struct_2B6f2Bb().unpack(str[start:end])
      self.is_mr_update = bool(self.is_mr_update)
      self.is_lr_update = bool(self.is_lr_update)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B6f2Bb = None
def _get_struct_2B6f2Bb():
    global _struct_2B6f2Bb
    if _struct_2B6f2Bb is None:
        _struct_2B6f2Bb = struct.Struct("<2B6f2Bb")
    return _struct_2B6f2Bb
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
